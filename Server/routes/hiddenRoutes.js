const express = require("express");
const router = express.Router();
const dotenv = require("dotenv");
const { handleFileError } = require("../utils/ExceptionCatch");
const Record = require("../models/recordModel");

// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
dotenv.config();

// H√†m ki·ªÉm tra SECRET_KEY
function validateSecretKey(req) {
    const clientSecret = req.body.SECRET_KEY;
    const serverSecret = process.env.SECRET_KEY;

    return clientSecret && serverSecret && clientSecret === serverSecret;
}

// H√†m chu·∫©n h√≥a t√™n mi·ªÅn t·ª´ URL
function getNormalizedDomain(urlPath) {
    if (!urlPath.startsWith('http://') && !urlPath.startsWith('https://')) {
        urlPath = 'http://' + urlPath;
    }

    try {
        const url = new URL(urlPath);
        return url.hostname.toLowerCase();
    } catch (error) {
        return urlPath
            .replace(/^https?:\/\//, '')
            .split('/')[0]
            .toLowerCase();
    }
}

// H√†m l·ªçc URL t∆∞∆°ng t·ª± d·ª±a tr√™n username, password v√† domain ƒë√£ chu·∫©n h√≥a
async function deduplicateAndDeleteRecords(data) {
    const uniqueEntries = new Map();
    const duplicateIds = [];

    for (const entry of data) {
        const normalizedDomain = getNormalizedDomain(entry.url_path);
        const uniqueKey = `${entry.username}|${entry.password}|${normalizedDomain}`;

        // N·∫øu ƒë√£ c√≥ b·∫£n ghi t∆∞∆°ng t·ª±, ƒë√°nh d·∫•u ID ƒë·ªÉ x√≥a
        if (uniqueEntries.has(uniqueKey)) {
            duplicateIds.push(entry._id);
        } else {
            uniqueEntries.set(uniqueKey, entry);
        }
    }

    // X√≥a c√°c b·∫£n ghi tr√πng l·∫∑p
    if (duplicateIds.length > 0) {
        await Record.deleteMany({ _id: { $in: duplicateIds } });
    }

    return {
        filteredData: Array.from(uniqueEntries.values()),
        deletedCount: duplicateIds.length,
    };
}

// üìå API ƒë·ªÉ l·ªçc c√°c b·∫£n ghi l·∫∑p v√† x√≥a
router.post("/c3searchtool_filterrecords", async (req, res) => {
    try {
        // Ki·ªÉm tra SECRET_KEY
        if (!validateSecretKey(req)) {
            return res.status(401).json({ message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p! SECRET_KEY kh√¥ng h·ª£p l·ªá." });
        }

        // L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ MongoDB
        const data = await Record.find({}, { username: 1, password: 1, url_path: 1 });

        if (!data || data.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi n√†o!" });
        }

        // L·ªçc c√°c b·∫£n ghi tr√πng l·∫∑p v√† x√≥a
        const { filteredData, deletedCount } = await deduplicateAndDeleteRecords(data);

        res.status(200).json({ 
            message: `L·ªçc th√†nh c√¥ng! ƒê√£ x√≥a ${deletedCount} b·∫£n ghi tr√πng l·∫∑p. Gi·ªØ l·∫°i ${filteredData.length} b·∫£n ghi.`,
            data: filteredData
        });
    } catch (error) {
        console.error("L·ªói khi l·ªçc URL t∆∞∆°ng t·ª±:", error.message);
        res.status(500).json({ message: handleFileError("L·ªçc URL t∆∞∆°ng t·ª±", error) });
    }
});

module.exports = router;
