const express = require("express");
const path = require("path");
const fs = require("fs");
const { handleFileError } = require("../utils/ExceptionCatch");
const router = express.Router();

const Record = require("../models/recordModel");
const Log = require("../models/logModel");

router.post("/insert", async (req, res) => {
    try {
        const filenames = req.body;
        if (!Array.isArray(filenames) || filenames.length === 0) {
            return res.status(400).json({ error: "Danh s√°ch file kh√¥ng h·ª£p l·ªá!" });
        }

        const operations = [];
        const errorMessages = [];
        const logEntries = [];

        // üìå Truy v·∫•n Log ƒë·ªÉ ki·ªÉm tra file n√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
        const existingLogs = await Log.find({ filename: { $in: filenames } }).lean();
        const existingFilenames = new Set(existingLogs.map(log => log.filename));

        for (const filename of filenames) {
            // N·∫øu filename ƒë√£ t·ªìn t·∫°i trong Log, b·ªè qua v√† b√°o l·ªói
            if (existingFilenames.has(filename)) {
                errorMessages.push(`‚ö†Ô∏è File ${filename} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.`);
                continue;
            }

            const filePath = path.join(global.searchToolDataDir, filename);

            try {
                const fileData = fs.readFileSync(filePath, "utf-8");
                const records = JSON.parse(fileData); // Gi·∫£ s·ª≠ file ch·ª©a m·ªôt m·∫£ng JSON

                if (!Array.isArray(records)) {
                    errorMessages.push(`‚ö†Ô∏è File ${filename} kh√¥ng ch·ª©a m·∫£ng JSON h·ª£p l·ªá.`);
                    logEntries.push({ filename, success: false });
                    continue;
                }

                for (const record of records) {
                    operations.push({
                        updateOne: {
                            filter: { username: record.username, password: record.password, url_path: record.url_path },
                            update: {
                                $setOnInsert: {
                                    url_path: record.url_path,
                                    filename: filename,
                                    run_time: record.run_time,
                                    log_resource: record.filename,
                                },
                            },
                            upsert: true,
                        },
                    });
                }

                // N·∫øu file x·ª≠ l√Ω th√†nh c√¥ng, l∆∞u log v·ªõi success = true
                logEntries.push({ filename, success: true });

            } catch (error) {
				logEntries.push({ filename, success: false });
                errorMessages.push(handleFileError(filename, error));
            }
        }

		//Ghi tr·∫°ng th√°i x·ª≠ l√Ω v√†o Log
		await Log.insertMany(logEntries);

        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ insert, tr·∫£ v·ªÅ l·ªói 422
        if (operations.length === 0) {
            return res.status(422).json({ errors: errorMessages });
        }

        // Th·ª±c hi·ªán thao t√°c ghi d·ªØ li·ªáu
        const upSertRecords = await Record.bulkWrite(operations);

        res.status(201).json({
            message: `Th√™m th√†nh c√¥ng ${upSertRecords.upsertedCount} t√†i kho·∫£n m·ªõi!`,
            errors: errorMessages.length ? errorMessages : null,
			record: upSertRecords.upsertedCount
        });

    } catch (error) {
        console.error("L·ªói khi insert records:", error);
        res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói khi th√™m t√†i kho·∫£n m·ªõi!", details: error.message });
    }
});

router.get("/", async (req, res) => {
    try {
        const batch = parseInt(req.query.batch) || 1;
        const limit = parseInt(req.query.limit) || 1000;
        const searchQuery = req.query.query ? req.query.query.trim() : "";
        const sortField = req.query.sortField;
        const sortOrder = req.query.sortOrder;

        const skip = (batch - 1) * limit;

        let query = {};
        let sort = { _id: -1 }; // default sort

        if (searchQuery) {
			const escapedQuery = searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            query = {
                $or: [
                    { username: { $regex: escapedQuery, $options: "i" } },
                    { url_path: { $regex: escapedQuery, $options: "i" } }
                ]
            };
        }

        // Apply sorting if provided
        if (sortField && sortOrder) {
            sort = {
                [sortField]: sortOrder === 'asc' ? 1 : -1
            };
        }

        const records = await Record.find(query)
            .sort(sort)
            .skip(skip)
            .limit(limit);

        const totalRecords = await Record.countDocuments(query);

        res.status(200).json({
            batch,
            limit,
            totalRecords,
            totalBatches: Math.ceil(totalRecords / limit),
            data: records,
            totalRecordsInCurrentBatch: records.length,
        });
    } catch (error) {
        res.status(500).json({ error: "Error fetching records", details: error.message });
    }
});

router.put("/update", async (req, res) => {
    try {
        const updatedRecord = req.body;
        if (!updatedRecord || !updatedRecord._id) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t ho·∫∑c _id kh√¥ng h·ª£p l·ªá." });
        }

        // L·∫•y record hi·ªán t·∫°i ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n c≈©
        const currentRecord = await Record.findById(updatedRecord._id);
        if (!currentRecord) {
            return res.status(404).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu." });
        }
        const oldUrlPath = currentRecord.url_path;

        const updateData = {
            url_path: updatedRecord.url_path,
            login_status: updatedRecord.login_status
        };

        // M·∫£ng ch·ª©a _id c·ªßa c√°c records ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        let updatedRecordIds = [updatedRecord._id];

        // C·∫≠p nh·∫≠t record hi·ªán t·∫°i
        await Record.updateOne(
            { _id: updatedRecord._id },
            { $set: updateData }
        );

        // N·∫øu applyToAll, c·∫≠p nh·∫≠t c√°c records kh√°c v√† l·∫•y _id
        if (updatedRecord.applyToAll) {
            // T√¨m t·∫•t c·∫£ records c√≥ c√πng url_path (tr·ª´ record hi·ªán t·∫°i)
            const recordsToUpdate = await Record.find({
                url_path: oldUrlPath,
                _id: { $ne: updatedRecord._id }
            });
            
            // L·∫•y danh s√°ch _id
            const additionalIds = recordsToUpdate.map(record => record._id);
            updatedRecordIds = [...updatedRecordIds, ...additionalIds];

            // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
            await Record.updateMany(
                { 
                    url_path: oldUrlPath,
                    _id: { $ne: updatedRecord._id }
                },
                { $set: updateData }
            );
        }

        // L·∫•y t·∫•t c·∫£ records ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        const updatedRecords = await Record.find({
            _id: { $in: updatedRecordIds }
        });

        res.status(200).json({
            message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
            updatedRecords: updatedRecords,
            updatedRecordIds: updatedRecordIds
        });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t record:", error);
		return res.status(404).json({ error: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin!" });
    }
});

module.exports = router;
