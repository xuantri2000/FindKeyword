const express = require("express");
const path = require("path");
const fs = require("fs");
const { handleFileError } = require("../utils/ExceptionCatch");
const router = express.Router();
const ExcelJS = require('exceljs');

const Record = require("../models/recordModel");
const Log = require("../models/logModel");
const BlackList = require("../models/blackListModel");

router.post("/insert", async (req, res) => {
    try {
        const filenames = req.body;
        if (!Array.isArray(filenames) || filenames.length === 0) {
            return res.status(400).json({ error: "Danh s√°ch file kh√¥ng h·ª£p l·ªá!" });
        }

        const operations = [];
        const errorMessages = [];
        const logEntries = [];

        // üìå Truy v·∫•n Log ƒë·ªÉ ki·ªÉm tra file n√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥
        const existingLogs = await Log.find({ filename: { $in: filenames } }).lean();
        const existingFilenames = new Set(existingLogs.map(log => log.filename));

        for (const filename of filenames) {
            // N·∫øu filename ƒë√£ t·ªìn t·∫°i trong Log, b·ªè qua v√† b√°o l·ªói
            if (existingFilenames.has(filename)) {
                errorMessages.push(`‚ö†Ô∏è File ${filename} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.`);
                continue;
            }

            const filePath = path.join(global.searchToolDataDir, filename);

            try {
                const fileData = fs.readFileSync(filePath, "utf-8");
                const records = JSON.parse(fileData); // Gi·∫£ s·ª≠ file ch·ª©a m·ªôt m·∫£ng JSON

                if (!Array.isArray(records)) {
                    errorMessages.push(`‚ö†Ô∏è File ${filename} kh√¥ng ch·ª©a m·∫£ng JSON h·ª£p l·ªá.`);
                    logEntries.push({ filename, success: false });
                    continue;
                }

                for (const record of records) {
                    operations.push({
                        updateOne: {
                            filter: { username: record.username, password: record.password, url_path: record.url_path },
                            update: {
                                $setOnInsert: {
                                    url_path: record.url_path,
                                    filename: filename,
                                    run_time: record.run_time,
                                    log_resource: record.filename,
                                },
                            },
                            upsert: true,
                        },
                    });
                }

                // N·∫øu file x·ª≠ l√Ω th√†nh c√¥ng, l∆∞u log v·ªõi success = true
                logEntries.push({ filename, success: true });

            } catch (error) {
				logEntries.push({ filename, success: false });
                errorMessages.push(handleFileError(filename, error));
            }
        }

		//Ghi tr·∫°ng th√°i x·ª≠ l√Ω v√†o Log
		await Log.insertMany(logEntries);

        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ insert, tr·∫£ v·ªÅ l·ªói 422
        if (operations.length === 0) {
            return res.status(422).json({ errors: errorMessages });
        }

        // Th·ª±c hi·ªán thao t√°c ghi d·ªØ li·ªáu
        const upSertRecords = await Record.bulkWrite(operations);

        res.status(201).json({
            message: `Th√™m th√†nh c√¥ng ${upSertRecords.upsertedCount} t√†i kho·∫£n m·ªõi!`,
            errors: errorMessages.length ? errorMessages : null,
			record: upSertRecords.upsertedCount
        });

    } catch (error) {
        console.error("L·ªói khi insert records:", error);
        res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói khi th√™m t√†i kho·∫£n m·ªõi!", details: error.message });
    }
});

// T√°ch logic l·ªçc v√† s·∫Øp x·∫øp v√†o m·ªôt h√†m chung
const buildFilterAndSort = async (req) => {
    const { query, sortField, sortOrder, status, target } = req.query;
    const filter = {};
	
    // L·∫•y danh s√°ch URL trong BlackList ƒë·ªÉ l·ªçc
    const targetUrls = await BlackList.find({}, 'url_path');
    const blockedUrls = targetUrls.map(target => new RegExp(target.url_path, 'i'));
    filter.url_path = { $not: { $in: blockedUrls } };

    // T√¨m ki·∫øm theo username ho·∫∑c url_path
    if (query) {
        const rawQuery = query.trim();
        const escaped = rawQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        filter.$or = [
            { username: { $regex: escaped, $options: 'i' } },
            { url_path: { $regex: escaped, $options: 'i' } }
        ];
    }

    // L·ªçc theo tr·∫°ng th√°i ƒëƒÉng nh·∫≠p n·∫øu c√≥
    if (status) {
        filter.login_status = status;
    }

	// L·ªçc theo target n·∫øu c√≥
    if (target) {
        filter.url_path = { $regex: target, $options: 'i' };
    }

    // S·∫Øp x·∫øp theo tr∆∞·ªùng v√† th·ª© t·ª±
    let sort = { _id: -1 };
    if (sortField && sortOrder) {
        sort = { [sortField]: sortOrder === 'asc' ? 1 : -1 };
    }

    return { filter, sort };
};

// C·∫≠p nh·∫≠t router
router.get('/export', async (req, res) => {
    try {
        const { filter, sort } = await buildFilterAndSort(req);
        const records = await Record.find(filter).sort(sort);

        const workbook = new ExcelJS.Workbook();
        const sheet = workbook.addWorksheet('Logs');

        sheet.columns = [
            { header: 'Username', key: 'username' },
            { header: 'Password', key: 'password' },
            { header: 'URL Path', key: 'url_path' },
            { header: 'Run Time', key: 'run_time' },
            { header: 'Status', key: 'login_status' },
        ];

        records.forEach(r => {
            sheet.addRow({
                username: r.username,
                password: r.password,
                url_path: r.url_path,
                run_time: r.run_time,
                login_status: r.login_status
            });
        });

        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', 'attachment; filename=logs_export.xlsx');
        await workbook.xlsx.write(res);
        res.end();
    } catch (err) {
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ xu·∫•t log, vui l√≤ng li√™n h·ªá b√© V√†ng!' });
    }
});

router.get('/', async (req, res) => {
    try {
        const batch = parseInt(req.query.batch) || 1;
        const limit = parseInt(req.query.limit) || 1000;
        const skip = (batch - 1) * limit;

        const { filter, sort } = await buildFilterAndSort(req);
        const records = await Record.find(filter).sort(sort).skip(skip).limit(limit);
        const totalRecords = await Record.countDocuments(filter);

        res.status(200).json({
            batch,
            limit,
            totalRecords,
            totalBatches: Math.ceil(totalRecords / limit),
            data: records,
            totalRecordsInCurrentBatch: records.length,
        });
    } catch (error) {
        res.status(500).json({ error: 'Error fetching records', details: error.message });
    }
});


router.put("/update", async (req, res) => {
    try {
        const updatedRecord = req.body;

        if (!updatedRecord || !updatedRecord._id) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t ho·∫∑c _id kh√¥ng h·ª£p l·ªá." });
        }

        // L·∫•y record hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã ban ƒë·∫ßu c·ªßa url_path
        const currentRecord = await Record.findById(updatedRecord._id);
        if (!currentRecord) {
            return res.status(404).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." });
        }
        const oldUrlPath = currentRecord.url_path;

        // L·∫•y danh s√°ch URL trong Target ƒë·ªÉ ki·ªÉm tra
        const targetUrls = await BlackList.find({}, "url_path");
        const blockedUrls = targetUrls.map(target => new RegExp(target.url_path, "i"));

        // N·∫øu URL g·∫ßn gi·ªëng v·ªõi BlackList th√¨ kh√¥ng c·∫≠p nh·∫≠t
        if (blockedUrls.some(regex => regex.test(updatedRecord.url_path))) {
            return res.status(403).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t do URL thu·ªôc danh s√°ch h·∫°n ch·∫ø." });
        }

        const updateData = {
            url_path: updatedRecord.url_path,
            login_status: updatedRecord.login_status
        };

        // C·∫≠p nh·∫≠t record hi·ªán t·∫°i
        const updateResult = await Record.updateOne(
            { _id: updatedRecord._id },
            { $set: updateData }
        );

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ g√¨ thay ƒë·ªïi
        if (updateResult.modifiedCount === 0) {
            return res.status(200).json({ message: "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.", fetch_all: false });
        }

        if (updatedRecord.applyToAll) {
            // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c b·∫£n ghi c√≥ c√πng url_path ban ƒë·∫ßu
            const bulkUpdateResult = await Record.updateMany(
                { 
                    url_path: oldUrlPath,
                    _id: { $ne: updatedRecord._id }
                },
                { $set: updateData }
            );

            return res.status(200).json({
                message: `C·∫≠p nh·∫≠t th√†nh c√¥ng! ƒê√£ c·∫≠p nh·∫≠t ${bulkUpdateResult.modifiedCount} t√†i kho·∫£n.`,
                fetch_all: true
            });
        } else {
            // N·∫øu ch·ªâ c·∫≠p nh·∫≠t m·ªôt b·∫£n ghi, l·∫•y d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
            const updatedCurrentRecord = await Record.findById(updatedRecord._id);

            return res.status(200).json({
                message: `C·∫≠p nh·∫≠t t√†i kho·∫£n "${updatedCurrentRecord.username}" th√†nh c√¥ng!`,
                updatedRecord: updatedCurrentRecord,
                fetch_all: false
            });
        }
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t record:", error);
        res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin!", details: error.message });
    }
});




module.exports = router;
