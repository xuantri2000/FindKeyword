const express = require("express");
const router = express.Router();
const Target = require("../models/targetListModel");

// üìå L·∫•y danh s√°ch Targetlist v·ªõi th√¥ng tin Parent
router.get("/", async (req, res) => {
    try {
        const targetList = await Target.aggregate([
            {
                $lookup: {
                    from: "targets",            // T√™n collection cha (t∆∞∆°ng t·ª± model Target)
                    localField: "parent_id",    // Tr∆∞·ªùng li√™n k·∫øt trong b·∫£ng hi·ªán t·∫°i
                    foreignField: "_id",        // Tr∆∞·ªùng li√™n k·∫øt trong b·∫£ng cha
                    as: "parent_info"           // ƒê·∫∑t t√™n tr∆∞·ªùng k·∫øt qu·∫£
                }
            },
            {
                $addFields: {
                    parent: {
                        $cond: {
                            if: { $gt: [{ $size: "$parent_info" }, 0] },  // Ki·ªÉm tra n·∫øu c√≥ parent
                            then: {
                                $concat: [
                                    { $arrayElemAt: ["$parent_info.target_name", 0] },
                                    " (",
                                    { $arrayElemAt: ["$parent_info.target_url", 0] },
                                    ")"
                                ]
                            },
                            else: "C·∫•p qu·ªëc gia"  // N·∫øu kh√¥ng c√≥ parent
                        }
                    }
                }
            },
            { $project: { parent_info: 0 } }  // Lo·∫°i b·ªè tr∆∞·ªùng t·∫°m
        ]);

        res.status(200).json(targetList);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch Target!" });
    }
});


router.get("/countries", async (req, res) => {
    try {
        // L·∫•y c√°c Target c√≥ parent_id l√† null ho·∫∑c kh√¥ng t·ªìn t·∫°i, ch·ªâ l·∫•y 3 tr∆∞·ªùng
        const targetList = await Target.find(
            { $or: [{ parent_id: null }, { parent_id: { $exists: false } }] },
            '_id target_name target_url'  // Ch·ªâ ch·ªçn c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        );
        res.status(200).json(targetList);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch Target!" });
    }
});

// üìå L·∫•y danh s√°ch Targetlist
router.get("/targets", async (req, res) => {
    try {
        // L·∫•y c√°c Target c√≥ parent_id kh√°c null
        const targetList = await Target.find({ 
            parent_id: { $exists: true, $ne: null } 
        });
        res.status(200).json(targetList);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch Target!" });
    }
});

// üìå Th√™m m·ªõi v√†o Targetlist
router.post("/", async (req, res) => {
    try {
        const { target_name, target_url, parent_id } = req.body;
        if (!target_name || !target_url) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!" });
        }
        const newEntry = new Target({ target_name, target_url, parent_id});
        await newEntry.save();
        res.status(201).json({ message: "Th√™m v√†o Targetlist th√†nh c√¥ng!", data: newEntry });
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi th√™m v√†o Targetlist!" });
    }
});

// üìå C·∫≠p nh·∫≠t m·ª•c trong Targetlist
router.put("/:id", async (req, res) => {
    try {
        const { target_name, target_url } = req.body;
        await Target.findByIdAndUpdate(req.params.id, { target_name, target_url });
        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t Targetlist!" });
    }
});

// üìå X√≥a kh·ªèi Targetlist
router.delete("/:id", async (req, res) => {
    try {
        await Target.findByIdAndDelete(req.params.id);
        res.status(200).json({ message: "X√≥a th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi x√≥a kh·ªèi Targetlist!" });
    }
});

module.exports = router;
